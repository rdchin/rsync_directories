#!/bin/bash
#
# Â©2020 Copyright 2020 Robert D. Chin
#
# Usage: bash server_rsync.sh
#        (not sh server_rsync.sh)
#
# +----------------------------------------+
# |        Default Variable Values         |
# +----------------------------------------+
#
VERSION="2020-07-01 22:56"
# +--------------------------------------------------------------------------+
# |                                                                          |
# |                 Customize Menu choice options below.                     |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
# Format: <#@@> <Menu Option> <#@@> <Description of Menu Option> <#@@> <Corresponding function or action or cammand>
#
#@@Exit#@@Exit to command-line prompt.#@@break
#
#@@About#@@Version information of this script.#@@f_about^$GUI
#
#@@Code History#@@Display code change history of this script.#@@f_code_history^$GUI
#
#@@Help#@@Display help message.#@@f_help_message^$GUI
#
#@@Synchronize#@@Synchronize two directories.#@@f_any^$GUI
#
#@@Log-file#@@Show latest log file.#@@f_display_log^$GUI
#
#@@Mount-points#@@Show mounted networked shares.#@@f_free^$GUI
#
# +----------------------------------------+
# |            Function f_free             |
# +----------------------------------------+
#
#  Inputs: $THIS_FILE, $1 - "dialog" or "whiptail" The CLI GUI application in use.
#    Uses: None.
# Outputs: temp.txt.
#
f_free () {
      date>temp.txt ; echo "Program script: $THIS_FILE">>temp.txt
      echo >>temp.txt
      # Test if this version of df has these OPTIONS.
      df -h --exclude devtmpfs --exclude tmpfs --output=source,fstype,avail,target >/dev/null 2>&1
      ERROR=$?
      if [ $ERROR = 1 ] ; then
         # Older version of df or nothing mounted, so use df with minimal OPTIONS.
         df -Th --exclude devtmpfs --exclude tmpfs >/dev/null 2>&1
         ERROR=$?
         if [ $ERROR = 1 ] ; then
            # Write error message to temp.txt to display later.
            echo "No mount-points are mounted or error reading mounted devices." >>temp.txt
            echo >>temp.txt
            df -Th --exclude devtmpfs --exclude tmpfs >>temp.txt
         else
            df -Th --exclude devtmpfs --exclude tmpfs >>temp.txt
         fi 
      else
         df -h --exclude devtmpfs --exclude tmpfs --output=source,fstype,avail,target >>temp.txt
         ERROR=$?
      fi 
      #
      if [ $ERROR = 1 ] ; then
         f_message $1 "OK" "Error from df command" temp.txt
      else
         f_message $1 "OK" "Show Mount-points (use arrow keys to scroll up/down/side-ways)" temp.txt
      fi
      rm temp.txt
      unset X Y  # Throw out this variable.
} # End of function f_free
#
# +----------------------------------------+
# |              Function f_any            |
# +----------------------------------------+
#
#  Inputs: $1=GUI.
#    Uses: X, Y.
# Outputs: APP_NAME.
#
f_any () {
      f_any_source $1
      if [ -n "$SOURCE" ] ; then
         f_any_target $1
         case $TARGET in 
              "")
                 f_message $1 "NOK" "Invalid TARGET directory" "Invalid TARGET directory, returning to MAIN menu."
              ;;
              *)
                 # TARGET_FILESYSTEM is the filesystem of the backup media (i.e. linux, FAT, NTFS),
                 # used to determine best rsync options.
                 TARGET_FILESYSTEM="linux"
                 # TIME_FILE is the file containing time stamps in clear text.
                 TIME_FILE="rsync_time_stamp_from_PC $SNAME to_PC $TNAME.txt"
                 TIME_FILE=$(echo $TIME_FILE | sed 's/ /_/g')   # Substitute "<underscore>" for "<space>" to derive TIME_FILE name.
                 # LOG_FILE is the partial name of the file which contains rsync operation details from last run.
                 LOG_FILE="rsync_from_PC $SNAME to_PC $TNAME.log"
                 LOG_FILE=$(echo $LOG_FILE | sed 's/ /_/g')   # Substitute "<underscore>" for "<space>" to derive LOG_FILE name.
                 #
                 f_go_nogo_rsync $1
                 ;;
         esac
      else
                 f_message $1 "NOK" "Invalid SOURCE directory" "Invalid SOURCE directory, returning to MAIN menu."
      fi
} # End of function f_any
#
# +----------------------------------------+
# |          Function f_any_source         |
# +----------------------------------------+
#
#  Inputs: $1=GUI.
#    Uses: X, Y.
# Outputs: APP_NAME.
#
f_any_source () {
      #
      clear  # Blank the screen.
      #
      case $1 in
           text)
              # SOURCE of the data to be synchronized.
              echo "Rsync between any two servers/directories."
              echo
              echo -n "Enter SOURCE directory with trailing / slash: "
              read SOURCE
              echo
              echo "SOURCE directory is now: $SOURCE"
              echo
              if [ -n "$SOURCE" ] ; then
                 echo -n "Enter SOURCE server (leave blank if localhost): "
                 read SNAME
              fi   
              ;;
           dialog)
              # Get the screen resolution or X-window size.
              # Get rows (height).
              Y=$(stty size | awk '{ print $1 }')
              # Get columns (width).
              X=$(stty size | awk '{ print $2 }')
              let Y=Y-17
              let X=X-6
              #
              # GENERATED_FILE="xdir_menu_gui.lib"
              # f_update_menu_gui $GUI $GENERATED_FILE
              # . $GENERATED_FILE  # Invoke Generated file.
              # f_directory_menu_gui $GUI
              #
              SOURCE=$($1 --stdout --backtitle "Use <tab>, <up/down arrows>, <spacebar> and / (slash) to select SOURCE dir." --title "Please choose a SOURCE directory to synchronize." --cancel-label "Exit" --fselect ./ $Y $X)
              ERROR=$?
              if [ $ERROR -eq 0 ] ; then  # Was "Cancel" button pressed?
                 SNAME=$($1 --output-fd 1 --title "Specify SOURCE Server." --inputbox "Enter SOURCE server (leave blank if localhost):" 10 70)
              else
                 SNAME=""  # Cancel button pressed for directory question, don't ask any more questions.
              fi
              ;;
           whiptail)
              #
              # GENERATED_FILE="xdir_menu_gui.lib"
              # f_update_menu_gui $GUI $GENERATED_FILE
              # . $GENERATED_FILE  # Invoke Generated file.
              # f_directory_menu_gui $GUI
              #
              SOURCE=$($1 --title "Rsync between any two servers/directories." --inputbox "Enter SOURCE directory with trailing / slash ." 10 70 3>&1 1>&2 2>&3)
	      ERROR=$?
              if [ $ERROR -eq 0 ] ; then  # Was "Cancel" button pressed?
                 SNAME=$($1 --title "Specify SOURCE Server." --inputbox "Enter SOURCE server (leave blank if localhost):" 10 70 3>&1 1>&2 2>&3)
              else
    	         SNAME=""  # Cancel button pressed for directory question, don't ask any more questions.
              fi
              ;;
      esac
      #
      # Make the default SOURCE Server is localhost.
      if [ -z "$SNAME" ] ; then
         SNAME="localhost"
      fi
      #
} # End of function f_any_source
#
# +----------------------------------------+
# |          Function f_any_target         |
# +----------------------------------------+
#
#  Inputs: $1=GUI.
#    Uses: X, Y.
# Outputs: APP_NAME.
#
f_any_target () {
      case $1 in
           text)
              # TARGET where the data is synchronized.
              echo
              echo -n "Enter TARGET directory without trailing / slash: "
              read TARGET
              echo
              echo "TARGET directory is now: $TARGET"
              echo
              if [ -n "$TARGET" ] ; then
                 echo -n "Enter TARGET server (leave blank if localhost): "
                 read TNAME
                 echo
                 if [ -z "$TNAME" ] ; then
                    TNAME="localhost"
                 fi
              fi   
              ;;
           dialog)
              # Get the screen resolution or X-window size.
              # Get rows (height).
              Y=$(stty size | awk '{ print $1 }')
              # Get columns (width).
              X=$(stty size | awk '{ print $2 }')
              let Y=Y-17
              let X=X-6
              #
              TARGET=$($1 --stdout --backtitle "Use <tab>, <up/down arrows>, <spacebar> and / (slash) to select TARGET dir." --title "Please choose a TARGET directory to synchronize." --cancel-label "Exit" --fselect ./ $Y $X)
              ERROR=$?
              if [ $ERROR -eq 0 ] ; then  # Was "Cancel" button pressed?
                 TNAME=$($1 --output-fd 1 --title "Specify TARGET Server." --inputbox "Enter TARGET server (leave blank if localhost):" 10 70)
              else
                 TNAME=""  # Cancel button pressed for directory question, don't ask any more questions.
              fi
              ;;
           whiptail)
              TARGET=$($1 --title "Rsync between any two servers/directories." --inputbox "Enter TARGET directory without trailing / slash ." 10 70 3>&1 1>&2 2>&3)
              ERROR=$?
              if [ $ERROR -eq 0 ] ; then  # Was "Cancel" button pressed?
                 TNAME=$($1 --title "Specify TARGET Server." --inputbox "Enter TARGET server (leave blank if localhost):" 10 70 3>&1 1>&2 2>&3)
              else
                 TNAME=""  # Cancel button pressed for directory question, don't ask any more questions.
              fi
              ;;
      esac
      #
      # Make the default TARGET Server is localhost.
      if [ -z "$TNAME" ] ; then
         TNAME="localhost"
      fi
      #
      unset X Y
} # End of function f_any
#
# +----------------------------------------+
# |        Function f_go_nogo_rsync        |
# +----------------------------------------+
#
#  Inputs:  $1=GUI, ERROR.
#    Uses: ANS
# Outputs: None.
#
f_go_nogo_rsync () {
      #
      clear  # Clear the screen.
      #
      if [ ! -d /var/log/rsync ] ; then
         f_message $1 "OK" "!!!WARNING!!!" "Cannot continue, /var/log/rsync directory either does not exist\nor you do not have WRITE permission\nto the  log directory below:\n\n /var/log/rsync"
         f_abort
      fi
      #
      f_free $1
      #      
      if [ $ERROR -eq 0 ] ; then
         f_rsync
      else
         f_message $1 "OK" "Failed Mount" "Cannot synchronize due to mounting problems.\nrsync is aborted."
         #
         clear  # Clear the screen.
         #
      fi
      unset ANS
} # End of function f_go_nogo_rsync
#
# +------------------------------------+
# |           Function f_rsync         |
# +------------------------------------+
#
#  Inputs: #  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          SOURCE, TARGET, TARGET_FILESYSTEM, LOG_FILE, THIS_FILE, VERSION.
#    Uses: X, TIME_FILE.
# Outputs: None.
#
f_rsync () {
      #
      # For any mount point to synchronize:
      #
      # Prerequisites: External device share available on TARGET and
      #                directory /var/log/rsync exists.
      # 
      # If you edit this shell script, use -n option or --dry-run for testing.
      #
      #  when SOURCE and/or TARGET mount-point does not exist. 
      #
      if [ ! -d $SOURCE ] || [ ! -d $TARGET ] ; then
         #
         if [ ! -d $SOURCE ] ; then
            f_message $1 "OK" "!!!WARNING!!!" "Cannot continue, SOURCE directory either does not exist\nor you do not have WRITE permission\nto the SOURCE directory below:\n\n $SOURCE"
         else
            f_message $1 "OK" "!!!WARNING!!!" "Cannot continue, TARGET directory either does not exist\nor you do not have WRITE permission\nto the TARGET directory below:\n\n $TARGET"
         fi
         f_message $1 "OK" "To help diagnose problem, here is a list of mounted drives/devices."
         #
         clear  # Blank the screen.
         #
         # List of mounted drives/devices.
         f_free $1
         #
         clear  # Blank the screen.
         #
         f_message $1 "OK" "Re-start this script once the external device is mounted properly\nat the mount-point directory." 
      else
         f_yn_question $1 "N" "Confirmation of SOURCE/TARGET" "Synchronization by rsync from SOURCE to TARGET. \n\n From SOURCE directory: \n\"$SOURCE\" \n\n   To TARGET directory: \n\"$TARGET\" \n\n       Log file:\n$LOG_FILE\n\nDate stamp file:\n$TIME_FILE\n\nIs this correct? Last chance to abort.\n                 < No > aborts rsync."
         if [ "$ANS"="Y" ] ; then
            # Yes, use selected directories.
            f_rsync2 $1
         else
            # No, bad selection. Null selections. Quit.
            f_message $1 "OK" "!!! Abort rsync !!!" "Aborting rsync operation."
         fi
      fi
      unset X Y
} # End of function f_rsync
#
# +------------------------------------+
# |           Function f_rsync2        |
# +------------------------------------+
#
#  Inputs: #  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          SOURCE, TARGET, TARGET_FILESYSTEM, LOG_FILE, THIS_FILE, VERSION.
#    Uses: TIME_FILE.
# Outputs: None.
#
f_rsync2 () {
      clear  # Blank the screen.
      f_test_connection $GUI $SNAME
      if [ $ERROR -eq 0 ] ; then
         f_test_connection $GUI $TNAME
         if [ $ERROR -eq 0 ] ; then
            # Do the actual rsync.
            clear  # Blank the screen.
            f_rsync_command
            #
            # Display free space on screen.
            f_df_gui
            #
            # Write rsync parameters to file $TIME_FILE.
            echo "Synchronization by rsync from SOURCE to TARGET is complete." >>$TIME_FILE
            echo >>$TIME_FILE
            echo " from SOURCE directory:" >>$TIME_FILE
            echo "$SOURCE" >>$TIME_FILE
            echo >>$TIME_FILE
            echo "   to TARGET directory:" >>$TIME_FILE
            echo "$TARGET" >>$TIME_FILE
            echo  >>$TIME_FILE
            echo "Date Stamp File:" >>$TIME_FILE
            echo "$TIME_FILE" >>$TIME_FILE
            echo  >>$TIME_FILE
            echo "       Log file:" >>$TIME_FILE
            echo "$LOG_FILE" >>$TIME_FILE
            echo >>$TIME_FILE
            echo "Backup script $THIS_FILE ver. $VERSION" >>$TIME_FILE
            echo "has completed its run." >>$TIME_FILE
            #
            # Display rsync parameters with start and end times on screen.
            f_message $1 "OK" "Start-End Times" $TIME_FILE
            #
            # Old code using GUI msgbox.
            # $1 --title "Rsync has completed" --msgbox "Synchronization by rsync from SOURCE to TARGET is complete. \n\n $TIME_FILE\n\n from SOURCE directory: \n\"$SOURCE\" \n\n   to TARGET directory: \n\"$TARGET\" \n\n       Log file: $LOG_FILE\n\nDate Stamp File: $TIME_FILE\n\nBackup script \"$THIS_FILE\" ver. $VERSION\nhas completed its run." 23 68
            #
            f_yn_question $1 "Y" "View log file?" "Do you want to see the log file?"
            if [ "$ANS" = "Y" ] ; then
               # Yes, show log file.
               f_message $1 "OK" "/var/log/rsync/<LOG_FILE> (use arrow keys to scroll up/down/side-ways)" $LOG_FILE               
            fi
         fi
      fi
} # End of function f_rsync2
#
# +----------------------------------------+
# |        Function f_show_log_file        |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          $2 - $LOG_FILE.
#    Uses: X, Y.
# Outputs: None.
#
f_show_log_file_gui () {
      #
      f_message $1 "OK" "/var/log/rsync/<LOG_FILE> (use arrow keys to scroll up/down/side-ways)" $2
      #
} # End of function f_show_log_file
#
# +------------------------------------+
# |      Function f_rsync_command      |
# +------------------------------------+
#
#  Inputs: SOURCE, TARGET, TARGET_FILESYSTEM, LOG_FILE, THIS_FILE,
#          VERSION.
#    Uses: TIME_FILE.
# Outputs: None.
#
f_rsync_command () {
         # Record the start date/time of the backup.
         # Use printf to put everything on a single line for easy readability.
         # The echo command inserts <CR><LF> even if using -n switch so unused.
         #
         printf "$THIS_FILE  started at: ">$TIME_FILE;date>>$TIME_FILE
         # 
         if [ "$TARGET_FILESYSTEM" = linux ] ; then
            LOG_FILE="/var/log/rsync/$(date +%Y%m%d-%H%M)_$LOG_FILE"
            clear  # Blank the screen.
            # If backing up to ext2-ext4 partition, you can preserve permissions, owner, group. Therefore can use -a(rchive) option.
            # Use options -avhi (archive, verbose, human-readable, itemize changes).
            # Start actual backup command rsync
            # sudo rsync -avhi --progress --delete --force --exclude '.gvfs' --log-file=$LOG_FILE $SOURCE $TARGET
            # sudo rsync -rltvhi --progress --delete --force --exclude '.gvfs' --log-file=$LOG_FILE $SOURCE $TARGET
            # sudo rsync -rltvhi --progress --delete --size-only --exclude '.gvfs' --log-file=$LOG_FILE $SOURCE $TARGET
            #
            # Use options -rltvhi (recursive, symlinks, times, verbose, human-readable, itemize changes).
            #             (Note: DO NOT preserve permissions).
            sudo rsync -rltvhi --size-only --progress --delete --exclude '.gvfs' --log-file=$LOG_FILE $SOURCE $TARGET
            #
         else
            # If backing up to FAT32 partition, DO NOT preserve permissions, owner, group. Therefore cannot use -a(rchive) option.
            # Use options -rltDvhi (recursive, links (symlinks), times, Devices/specials, verbose, human-readable, itemize changes.
            # Start actual backup command rsync
            LOG_FILE="/var/log/rsync/$(date +%Y%m%d-%H%M)_$LOG_FILE"
            clear  # Blank the screen.
            sudo rsync -rltDvhi --size-only --progress --delete --exclude '.gvfs'  --log-file=$LOG_FILE $SOURCE $TARGET
         fi  
         # 
         # Record the end date/time of the backup.
         # Use printf to put everything on a single line for easy readability.
         # The echo command inserts <CR><LF> even if using -n switch so unused.
         #
         printf "$THIS_FILE finished at: ">>$TIME_FILE;date>>$TIME_FILE
         #
         # 2010-06-23 rdc change from cp $TIME_FILE . . . to sudo cp $TIME_FILE . . .
         touch $TIME_FILE
         sudo cp $TIME_FILE $TARGET
} # End of function f_rsync_command
#
# +----------------------------------------+
# |         Function f_display_log         |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          $2 - $LOG_FILE.
#    Uses: X, Y.
# Outputs: None.
#
f_display_log () {
      if [ -n "$2" ] ; then  # if $LOG_FILE variable is not null.
         f_message $1 "OK" "/var/log/rsync/<LOG_FILE> (use arrow keys to scroll up/down/side-ways)"  $2
      else
         # Listing latest log file created by script, server_rsync.
         ls -tC /var/log/rsync | head -n 1 >temp.txt
         XX="Display latest log file: /var/log/rsync/$(cat temp.txt)"
         YY="/var/log/rsync/$(cat temp.txt)"
         echo $XX >temp.txt
         echo >>temp.txt
         cat $YY >>temp.txt
         f_message $1 "OK" "/var/log/rsync/<LOG_FILE> (use arrow keys to scroll up/down/side-ways)" temp.txt
      fi
      rm temp.txt
      unset X Y XX YY  # Throw out this variable.
} # End of function f_display_log
#
# All dun dun noodles.
